# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Account {
  address: ID!
  assets: [Asset!]
  auctions: [Auction!]
  followers: [Account!]
  following: [Account!]
  orders: [Order!]
}

type AccountEdge {
  cursor: String
  node: Account
}

type AccountPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type AccountResponse {
  edges: [AccountEdge!]
  pageData: PageData
  pageInfo: AccountPageInfo
}

input AddLikeArgs {
  identifier: String!
}

type Asset {
  attributes: String!
  auctions: [Auction!]
  balance: String
  collection: ID!
  creationDate: String!
  creatorAddress: String!
  hash: String
  identifier: String!
  isLiked(byAddress: String!): Boolean
  lastSale: DateTime!
  lastSalePrice: Price
  likesCount: Int!
  metadata: Metadata
  name: String
  nonce: Int!
  owners: [String!]
  previousOwners: [Owner!]
  royalties: String!
  tags: [String!]
  thumbnailUrl: String!
  type: NftTypeEnum!
  uris: [String!]!
  url: String!
}

enum AssetActionEnum {
  Added
  Bought
  ClosedAuction
  Created
  EndedAuction
  Received
  StartedAuction
}

type AssetEdge {
  cursor: String
  node: Asset
}

type AssetHistoryLog {
  action: AssetActionEnum!
  actionDate: String!
  address: String!
  itemCount: Int!
  price: Price
}

type AssetPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

input AssetsFilter {
  collection: String
  creatorAddress: String
  identifier: String
  likedByAddress: String
  ownerAddress: String
  tags: [String!]
}

type AssetsResponse {
  edges: [AssetEdge!]
  pageData: PageData
  pageInfo: AssetPageInfo
}

input AttributeInput {
  description: String!
  tags: [String!]!
}

type Auction {
  asset: Asset!
  availableTokens: Int
  collection: String!
  endDate: String!
  id: ID!
  identifier: String!
  maxBid: Price!
  minBid: Price!
  nonce: Int!
  nrAuctionedTokens: Int
  orders: [Order!]
  ownerAddress: String
  startDate: String!
  status: AuctionStatusEnum
  topBid: Price
  topBidder: Account
  type: AuctionTypeEnum
}

type AuctionEdge {
  cursor: String
  node: Auction
}

type AuctionPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type AuctionResponse {
  edges: [AuctionEdge!]
  pageData: PageData
  pageInfo: AuctionPageInfo
}

enum AuctionStatusEnum {
  Closed
  Ended
  None
  Running
}

enum AuctionTypeEnum {
  Nft
  None
  SftAll
  SftOnePerPayment
}

input BidActionArgs {
  auctionId: Int!
  collection: String!
  nonce: String!
  price: String!
}

input BuySftActionArgs {
  auctionId: Int!
  collection: String!
  nonce: String!
  price: String!
}

input ConnectionArgs {
  """Paginate after opaque cursor"""
  after: String

  """Paginate before opaque cursor"""
  before: String

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input CreateAuctionArgs {
  collection: String!
  deadline: String!
  maxBid: String
  maxOneSftPerPayment: Boolean
  minBid: String!
  nonce: Int!
  paymentToken: String!
  paymentTokenNonce: Int
  quantity: Int!
  startDate: String
}

input CreateNftArgs {
  attributes: AttributeInput!
  collection: String!
  name: String!
  quantity: Int!
  royalties: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input Filter {
  field: String!
  op: Operation!
  values: [String!]!
}

input FiltersExpression {
  filters: [Filter!]!
  operator: Operator!
}

input FollowEntityArgs {
  addressToFollow: String!
}

input HandleQuantityArgs {
  addOrBurnRoleAddress: String!
  collection: String!
  nonce: Int!
  quantity: Int!
}

input IssueCollectionArgs {
  canFreeze: Boolean = false
  canPause: Boolean = false
  canTransferNFTCreateRole: Boolean = false
  canWipe: Boolean = false
  tokenName: String!
  tokenTicker: String!
}

type Metadata {
  description: String!
  fileName: String!
  fileType: String!
  fileUri: String!
}

type Mutation {
  addLike(input: AddLikeArgs!): Boolean!
  addSftQuantity(input: HandleQuantityArgs!): TransactionNode!
  bid(input: BidActionArgs!): TransactionNode!
  burnQuantity(input: HandleQuantityArgs!): TransactionNode!
  buySft(input: BuySftActionArgs!): TransactionNode!
  createAuction(input: CreateAuctionArgs!): TransactionNode!
  createNft(file: Upload!, input: CreateNftArgs!): TransactionNode!
  endAuction(auctionId: Int!): TransactionNode!
  follow(input: FollowEntityArgs!): Boolean!
  issueNftCollection(input: IssueCollectionArgs!): TransactionNode!
  issueSFTCollection(input: IssueCollectionArgs!): TransactionNode!
  removeLike(input: RemoveLikeArgs!): Boolean!
  setRoles(input: SetNftRolesArgs!): TransactionNode!
  stopNFTCreate(input: StopNftCreateArgs!): TransactionNode!
  transferNFTCreateRole(input: TransferNftCreateRoleArgs!): TransactionNode!
  transferNft(input: TransferNftArgs!): TransactionNode!
  unfollow(input: UnfollowEntityArgs!): Boolean!
  withdraw(auctionId: Int!): TransactionNode!
}

enum NftTypeEnum {
  NonFungibleESDT
  SemiFungibleESDT
}

enum Operation {
  EQ
  GE
  IN
  LIKE
}

enum Operator {
  AND
  OR
}

type Order {
  auction: Auction!
  auctionId: Int!
  creationDate: DateTime!
  endDate: DateTime!
  from: Account
  id: ID!
  ownerAddress: String!
  price: Price!
  status: OrderStatusEnum!
}

type OrderEdge {
  cursor: String
  node: Order
}

type OrderPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

enum OrderStatusEnum {
  active
  inactive
}

type OrdersResponse {
  edges: [OrderEdge!]
  pageData: PageData
  pageInfo: OrderPageInfo
}

type Owner {
  account: Account
  endDate: DateTime!
  startDate: DateTime!
}

type PageData {
  count: Int!
  limit: Int!
  offset: Int!
}

type Price {
  amount: String!
  nonce: Int!
  token: ID!
}

type Query {
  assetHistory(collection: String!, nonce: Int!): [AssetHistoryLog!]!
  assets(filters: AssetsFilter, pagination: ConnectionArgs): AssetsResponse!
  auctions(filters: FiltersExpression, pagination: ConnectionArgs, sorting: [Sorting!]): AuctionResponse!
  collections(ownerAddress: String!): [String!]!
  followers(address: String, pagination: ConnectionArgs): AccountResponse!
  following(address: String, pagination: ConnectionArgs): AccountResponse!
  orders(filters: FiltersExpression, pagination: ConnectionArgs, sorting: [Sorting!]): OrdersResponse!
}

input RemoveLikeArgs {
  identifier: String!
}

input SetNftRolesArgs {
  addressToTransfer: String!
  collection: String!
  roles: [String!]!
}

enum Sort {
  ASC
  DESC
}

input Sorting {
  direction: Sort!
  field: String!
}

input StopNftCreateArgs {
  collection: String!
  ownerAddress: String!
}

type TransactionNode {
  chainID: String!
  data: String!
  gasLimit: Float!
  gasPrice: Float!
  nonce: Int!
  options: String!
  receiver: String!
  sender: String!
  status: String!
  value: String!
  version: Float!
}

input TransferNftArgs {
  collection: String!
  destinationAddress: String!
  nonce: Int!
  quantity: Int!
}

input TransferNftCreateRoleArgs {
  addressToTransferList: [String!]!
  collection: String!
  ownerAddress: String!
}

input UnfollowEntityArgs {
  addressToUnfollow: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload
