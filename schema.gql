# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Account {
  address: ID!
  assets: [Asset!]
  auctions: [Auction!]
  coverImgUrl: String
  description: String
  followers: [Account!]
  following: [Account!]
  herotag: String
  id: Int!
  orders: [Order!]
  profileImgUrl: String
  socialLinks: [SocialLink!]
}

type AccountEdge {
  cursor: String
  node: Account
}

type AccountPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type AccountResponse {
  edges: [AccountEdge!]
  pageData: PageData
  pageInfo: AccountPageInfo
}

input AddLikeArgs {
  address: String!
  nonce: Int!
  token: String!
}

type Asset {
  attributes: String!
  auction: Auction
  creationDate: DateTime!
  creator: Account!
  creatorAddress: String!
  currentOwner: Owner
  hash: String
  identifier: String!
  isLiked(byAddress: String!): Boolean!
  lastSale: DateTime!
  lastSalePrice: Price
  likesCount: Int!
  name: String!
  nonce: Int!
  ownerAddress: String!
  previousOwners: [Owner!]
  royalties: String!
  tags: [String!]
  token: ID!
  type: TokenTypeEnum!
  uris: [String!]!
}

type AssetEdge {
  cursor: String
  node: Asset
}

type AssetPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

input AssetsFilter {
  nonce: Int
  ownerAddress: String
  tags: [String!]
  token: String
}

type AssetsResponse {
  edges: [AssetEdge!]
  pageData: PageData
  pageInfo: AssetPageInfo
}

input AttributeInput {
  description: String!
  tags: [String!]!
}

type Auction {
  asset: Asset!
  endDate: String!
  id: ID!
  identifier: String!
  maxBid: Price!
  minBid: Price!
  nonce: Int!
  orders: [Order!]
  owner: Account
  ownerAddress: String
  startDate: String!
  status: AuctionStatusEnum
  token: String!
  topBid: Price
  topBidder: Account
}

type AuctionEdge {
  cursor: String
  node: Auction
}

type AuctionPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type AuctionResponse {
  edges: [AuctionEdge!]
  pageData: PageData
  pageInfo: AuctionPageInfo
}

enum AuctionStatusEnum {
  Closed
  Ended
  None
  Running
  SftWaitingForBuyOrOwnerClaim
}

input BidActionArgs {
  auctionId: Int!
  nonce: String!
  price: String!
  token: String!
}

input CreateAuctionArgs {
  deadline: String!
  maxBid: String!
  maxOneSftPerPayment: Boolean!
  minBid: String!
  nonce: Int!
  ownerAddress: String!
  paymentToken: String!
  paymentTokenNonce: Int!
  quantity: Int!
  startDate: String!
  token: String!
}

input CreateNftArgs {
  attributes: AttributeInput!
  name: String!
  ownerAddress: String!
  quantity: Int!
  royalties: String!
  token: String!
}

input CreateOrderArgs {
  auctionId: Int!
  ownerAddress: String!
  priceAmount: String!
  priceNonce: Int!
  priceToken: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input Filter {
  field: String!
  op: Operation!
  values: [String!]!
}

input FiltersExpression {
  filters: [Filter!]!
  operator: Operator!
}

input HandleQuantityArgs {
  addOrBurnRoleAddress: String!
  nonce: Int!
  quantity: Int!
  token: String!
}

input IssueTokenArgs {
  canFreeze: Boolean = false
  canPause: Boolean = false
  canTransferNFTCreateRole: Boolean = false
  canWipe: Boolean = false
  tokenName: String!
  tokenTicker: String!
}

type Mutation {
  addLike(input: AddLikeArgs!): Boolean!
  addSftQuantity(input: HandleQuantityArgs!): TransactionNode!
  bid(input: BidActionArgs!): TransactionNode!
  burnQuantity(input: HandleQuantityArgs!): TransactionNode!
  createAuction(input: CreateAuctionArgs!): TransactionNode!
  createNft(file: Upload!, input: CreateNftArgs!): TransactionNode!
  createOrder(input: CreateOrderArgs!): Order!
  endAuction(auctionId: Int!): TransactionNode!
  issueNft(input: IssueTokenArgs!): TransactionNode!
  issueSemiFungible(input: IssueTokenArgs!): TransactionNode!
  removeLike(input: RemoveLikeArgs!): Boolean!
  saveAuction(auctionId: Int!): Auction!
  setRoles(input: SetNftRolesArgs!): TransactionNode!
  stopNFTCreate(input: StopNftCreateArgs!): TransactionNode!
  transferNFTCreateRole(input: TransferNftCreateRoleArgs!): TransactionNode!
  transferNft(input: TransferNftArgs!): TransactionNode!
  updateAuctionStatus(input: UpdateAuctionArgs!): Auction!
  upsertAccount(avatarImage: Upload, coverImage: Upload, input: UpsertAccountArgs!): Account!
  withdraw(auctionId: Int!): TransactionNode!
}

enum Operation {
  EQ
  IN
  LIKE
}

enum Operator {
  AND
  OR
}

type Order {
  auction: Auction!
  auctionId: Int!
  creationDate: DateTime!
  endDate: DateTime!
  from: Account
  id: ID!
  ownerAddress: String!
  price: Price!
  status: OrderStatusEnum!
}

type OrderEdge {
  cursor: String
  node: Order
}

type OrderPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

enum OrderStatusEnum {
  active
  inactive
}

type OrdersResponse {
  edges: [OrderEdge!]
  pageData: PageData
  pageInfo: OrderPageInfo
}

type Owner {
  account: Account
  endDate: DateTime!
  startDate: DateTime!
}

type PageData {
  count: Int!
  limit: Int!
  offset: Int!
}

type Price {
  amount: String!
  nonce: Int!
  token: ID!
}

type Query {
  accounts(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    filters: FiltersExpression

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): AccountResponse!
  assets(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    filters: AssetsFilter

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): AssetsResponse!
  auctions(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    filters: FiltersExpression

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): AuctionResponse!
  orders(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    filters: FiltersExpression

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): OrdersResponse!
  registeredNfts(ownerAddress: String!): [String!]!
  socialLinks(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): SocialLinksResponse!
}

input RemoveLikeArgs {
  address: String!
  nonce: Int!
  token: String!
}

input SetNftRolesArgs {
  addressToTransfer: String!
  roles: [String!]!
  token: String!
}

type SocialLink {
  iconName: String!
  id: Int!
  name: String!
}

type SocialLinkEdge {
  cursor: String
  node: SocialLink
}

type SocialLinkPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type SocialLinksResponse {
  edges: [SocialLinkEdge!]
  pageData: PageData
  pageInfo: SocialLinkPageInfo
}

input StopNftCreateArgs {
  ownerAddress: String!
  token: String!
}

enum TokenTypeEnum {
  NonFungibleESDT
  SemiFungibleESDT
}

type TransactionNode {
  chainID: String!
  data: String!
  gasLimit: Float!
  gasPrice: Float!
  nonce: Int!
  options: String!
  receiver: String!
  sender: String!
  status: String!
  value: String!
  version: Float!
}

input TransferNftArgs {
  destinationAddress: String!
  nonce: Int!
  ownerAddress: String!
  quantity: Int!
  token: String!
}

input TransferNftCreateRoleArgs {
  addressToTransferList: [String!]!
  ownerAddress: String!
  token: String!
}

input UpdateAuctionArgs {
  id: Int!
  status: AuctionStatusEnum!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UpsertAccountArgs {
  address: String!
  description: String
  socialLinkIds: [Int!]
}
