# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Account {
  address: ID
  cover: String
  description: String
  herotag: String
  privacy: Privacy
  profile: String
  socialLinks: [SocialLink!]
}

type AccountEdge {
  cursor: String
  node: Account
}

type AccountPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type AccountStats {
  address: ID
  auctions: String
  biddingBalance: String
  biddings: [Price!]
  claimable: String
  collected: String
  collections: String
  creations: String
  likes: String
  marketplaceKey: String
  orders: String
}

input AccountStatsFilter {
  address: String!
  isOwner: Boolean
  marketplaceKey: String
}

input AddLikeArgs {
  identifier: String!
}

input ArtistFilters {
  sorting: ArtistSortingEnum!
}

type ArtistResponse {
  edges: [AccountEdge!]
  pageData: PageData
  pageInfo: AccountPageInfo
}

enum ArtistSortingEnum {
  MostActive
  MostFollowed
  Trending
}

type Asset {
  aggregatorUrl: String!
  artist: Account
  attributes: String!

  """This will return only the running query!"""
  auctions(pagination: ConnectionArgs): AuctionResponse
  balance: String
  branding: CollectionBranding
  collection: ID!
  creationDate: Int
  creator: Account
  creatorAddress: String!
  hasAvailableAuctions: Boolean
  hash: String
  identifier: String!
  isLiked(byAddress: String!): Boolean
  isNsfw: Boolean
  isWhitelistedStorage: Boolean!
  likesCount: Int
  lowestAuction(filters: MarketplaceFilters): Auction
  marketplaces: [Marketplace!]
  media: [Media!]
  metadata: Metadata
  name: String!
  nonce: Int!
  owner: Account
  ownerAddress: String
  rarity: Rarity
  royalties: String!
  scamInfo: ScamInfo
  supply: String
  tags: [String!]
  thumbnailUrl: String @deprecated(reason: "This field will be removed in the next version")
  totalAvailableTokens: String
  totalRunningAuctions: String
  type: NftTypeEnum!
  uris: [String!]!
  url: String @deprecated(reason: "This field will be removed in the next version")
  verified: Boolean!
  viewsCount: Int
}

enum AssetActionEnum {
  Added
  Bought
  ClosedAuction
  Created
  EndedAuction
  Received
  StartedAuction
}

type AssetEdge {
  cursor: String
  node: Asset
}

input AssetHistoryFilter {
  identifier: String!
}

type AssetHistoryLog {
  account: Account
  action: AssetActionEnum!
  actionDate: Int!
  address: String!
  itemCount: String
  price: Price
  senderAccount: Account
  senderAddress: String
  transactionHash: String!
}

type AssetHistoryLogEdge {
  cursor: String
  node: AssetHistoryLog
}

type AssetHistoryLogPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type AssetHistoryLogResponse {
  edges: [AssetHistoryLogEdge!]
  pageData: PageData
  pageInfo: AssetHistoryLogPageInfo
}

type AssetPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

input AssetsCollectionFilter {
  """The owner of the collection"""
  ownerAddress: String
}

input AssetsFilter {
  artistAddress: String
  collection: String

  """This will work only with an owner address"""
  collections: [String!]
  creatorAddress: String
  identifier: String
  identifiers: [String!]
  likedByAddress: String
  ownerAddress: String
  tags: [String!]
  traits: [NftTrait]
  type: NftTypeEnum
}

type AssetsResponse {
  edges: [AssetEdge!]
  pageData: PageData
  pageInfo: AssetPageInfo
}

enum AssetsSortingEnum {
  MostLikes
  RankAsc
  RankDesc
}

input AttributeInput {
  description: String!
  tags: [String!]!
}

type AttributeType {
  attribute: [KeyValueType!]!
}

type Auction {
  asset: Asset!
  availableTokens: Int
  collection: String!
  creationDate: Int!
  endDate: Int!
  id: ID!
  identifier: String!
  marketplace: Marketplace
  marketplaceAuctionId: Int!
  marketplaceKey: String!
  maxBid: Price!
  minBid: Price!
  minBidDiff: Price!
  nonce: Int!
  nrAuctionedTokens: Int
  orders(pagination: ConnectionArgs): OrdersResponse
  owner: Account
  ownerAddress: String!
  startDate: Int!
  status: AuctionStatusEnum!
  tags: [String!]
  topBid: Price
  topBidder: Account
  type: AuctionTypeEnum!
}

enum AuctionCustomEnum {
  CURRENTPRICE
}

input AuctionCustomFilter {
  field: AuctionCustomEnum!
  op: Operation!
  sort: AuctionCustomSort
  values: [String]
}

input AuctionCustomSort {
  direction: Sort!
  field: AuctionCustomEnum!
}

type AuctionEdge {
  cursor: String
  node: Auction
}

type AuctionPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type AuctionResponse {
  edges: [AuctionEdge!]
  pageData: PageData
  pageInfo: AuctionPageInfo
  priceRange: PriceRange
}

enum AuctionStatusEnum {
  Claimable
  Closed
  Ended
  None
  Running
}

enum AuctionTypeEnum {
  Nft
  NftBid
  None
  SftAll
  SftOnePerPayment
}

input BidActionArgs {
  auctionId: Int!
  identifier: String!
  paymentTokenIdentifier: String = "EGLD"
  price: String!
}

input BuyRandomNftActionArgs {
  """The campaign id where the user wants to buy the nft/s"""
  campaignId: String!

  """The smart contract address of the campaign"""
  minterAddress: String!

  """
  The total price the user needs to pay in order to buy the number of nfts selected
  """
  price: String!

  """The number of nfts the user wants to buy"""
  quantity: String

  """The tier name on which the user wants to buy the nft"""
  tier: String!
}

input BuySftActionArgs {
  auctionId: Int!
  identifier: String!
  paymentTokenIdentifier: String = "EGLD"
  price: String!
  quantity: String
}

input BuyTicketsArgs {
  collectionIdentifier: String!
  price: String!
  ticketsNumber: Int!
}

type Campaign {
  availableNfts: Int!
  campaignId: ID!
  collection: CampaignCollection!
  coverImage: String!
  description: String
  endDate: Int!
  maxNftsPerTransaction: Int!
  mediaType: String!
  minterAddress: String!
  startDate: Int!
  status: CampaignStatusEnum!
  tiers: [Tier!]!
  totalNfts: Int!
  verified: Boolean!

  """This is the timestamp when the whitelist period expires"""
  whitelistExpire: Int!
}

type CampaignCollection {
  collectionHash: String!
  collectionName: String!
  collectionTicker: String!
  royalties: String!
}

type CampaignEdge {
  cursor: String
  node: Campaign
}

type CampaignPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

enum CampaignStatusEnum {
  Ended
  NotStarted
  Running
}

input CampaignsFilter {
  campaignId: String
  minterAddress: String
}

type CampaignsResponse {
  edges: [CampaignEdge!]
  pageData: PageData
  pageInfo: CampaignPageInfo
}

input ChildExpression {
  filters: [ChildFilter!]!
  operator: Operator!
}

input ChildFilter {
  field: String!
  op: Operation!
  relationField: String
  values: [String!]!
}

input ClaimTicketsArgs {
  collectionIdentifier: String!
}

type Collection {
  aggregatorUrl: String!
  artist: Account
  artistAddress: String!
  artistFollowersCount: Int!

  """This will return only the first 10 assets"""
  assets(filters: AssetsCollectionFilter, pagination: ConnectionArgs): AssetsResponse
  canAddQuantity: Boolean
  canBurn: Boolean
  canCreate: Boolean
  canFreeze: Boolean
  canPause: Boolean
  canTransferRole: Boolean
  canWipe: Boolean
  collection: String
  collectionAsset: CollectionAsset!
  creationDate: Int!
  description: String
  name: String!
  nftsCount: Int
  onSaleAssetsCount: Int!
  owner: Account
  ownerAddress: String
  pngUrl: String
  preferredRankAlgorithm: String
  roles: [CollectionRole!]
  social: CollectionSocial
  status: String
  svgUrl: String
  ticker: String!
  traits: [CollectionNftTrait]
  type: String
  verified: Boolean!
  website: String
}

type CollectionAsset {
  assets(input: CollectionAssetsRetriveCount): [CollectionAssetModel]
  totalCount: String
}

type CollectionAssetModel {
  identifier: String!
  thumbnailUrl: String
}

input CollectionAssetsRetriveCount {
  size: Int = 4
}

type CollectionBranding {
  description: String
  pngUrl: String
  social: CollectionSocial
  status: String
  svgUrl: String
  website: String
}

type CollectionEdge {
  cursor: String
  node: Collection
}

type CollectionNftTrait {
  name: String!
  values: [CollectionNftTraitValues!]!
}

type CollectionNftTraitValues {
  occurrences: Float!
  value: String!
}

type CollectionPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type CollectionResponse {
  edges: [CollectionEdge!]
  pageData: PageData
  pageInfo: CollectionPageInfo
}

type CollectionRole {
  address: String!
  canAddQuantity: Boolean
  canAddUri: Boolean
  canBurn: Boolean
  canCreate: Boolean
  canTransferRole: Boolean
  canUpdateAttributes: Boolean
  roles: [String!]!
}

type CollectionSocial {
  blog: String
  email: String
  twiter: String
}

type CollectionStats {
  activeAuctions: Int
  auctionsEnded: Int
  identifier: ID!
  items: Int
  maxPrice: String
  minPrice: String
  saleAverage: String
  volumeTraded: String
}

input CollectionStatsFilter {
  identifier: String!
  marketplaceKey: String
  paymentToken: String
}

input CollectionsFilter {
  """Flag for active last 30 days"""
  activeLast30Days: Boolean

  """The actual artist of the collection"""
  artistAddress: String

  """Flag for can create or not on collection"""
  canCreate: Boolean

  """Collection identifier"""
  collection: String

  """The user that has create role"""
  creatorAddress: String

  """The owner of the collection"""
  ownerAddress: String
  type: NftTypeEnum

  """Flag for verified collections"""
  verified: Boolean

  """Flag for collections where owner address has nfts"""
  withNfts: Boolean
}

enum CollectionsSortingEnum {
  Newest
  Trending
  Verified
}

input ConnectionArgs {
  """Paginate after opaque cursor"""
  after: String

  """Paginate before opaque cursor"""
  before: String

  """Paginate first"""
  first: Int = 10

  """Paginate last"""
  last: Int
}

input CreateAuctionArgs {
  deadline: String!
  identifier: String!
  maxBid: String
  maxOneSftPerPayment: Boolean
  minBid: String!
  paymentToken: String!
  paymentTokenNonce: Int
  quantity: String = "1"
  startDate: String
}

input CreateNftArgs {
  attributes: AttributeInput!
  collection: String!
  name: String!
  quantity: String = "1"
  royalties: String = "0"
}

<<<<<<< HEAD
input CurrentPaymentTokensFilters {
  collectionIdentifier: String
  marketplaceKey: String
=======
input CreateOfferArgs {
  deadline: String!
  identifier: String!
  paymentAmount: String!
  paymentToken: String!
  paymentTokenNonce: Int = 0
>>>>>>> Add offers functionality first commit
}

type ExploreCollectionsStats {
  activeLast30DaysCount: Int!
  allCollectionsCount: Int!
  verifiedCount: Int!
}

type ExploreNftsStats {
  allNftsCount: Int!
  buyNowCount: Int!
  liveAuctionsCount: Int!
}

type ExploreStats {
  artists: Int!
  collections: Int!
  nfts: Int!
}

enum FeaturedCollectionTypeEnum {
  Featured
  Hero
}

input FeaturedCollectionsFilter {
  type: FeaturedCollectionTypeEnum!
}

input Filter {
  field: String!
  op: Operation!
  values: [String]
}

input FiltersExpression {
  childExpressions: [ChildExpression!]
  filters: [Filter!]!
  operator: Operator!
}

input FlagCollectionInput {
  collection: String!
  nsfwFlag: Float!
}

input FlagNftInput {
  identifier: String!
  nsfwFlag: Float!
}

enum GroupBy {
  IDENTIFIER
}

input Grouping {
  groupBy: GroupBy!
}

input HandleQuantityArgs {
  addOrBurnRoleAddress: String!
  identifier: String!
  quantity: String!
}

input HistoryPagination {
  """Paginate first"""
  first: Int = 10

  """Timestamp from where to start"""
  timestamp: Int
}

input IssueCampaignArgs {
  campaignId: String!
  collectionIpfsHash: String!
  collectionName: String!
  collectionTicker: String!
  mediaTypes: MediaTypeEnum!
  mintEndTime: Int!
  mintPriceToken: String = "EGLD"
  mintStartTime: Int!
  minterAddress: String!
  royalties: String!
  tags: [String!]!
  tiers: [TierArgs!]!
  whitelistEndTime: Int!
}

input IssueCollectionArgs {
  canFreeze: Boolean = false
  canPause: Boolean = false
  canTransferNFTCreateRole: Boolean = false
  canWipe: Boolean = false
  tokenName: String!
  tokenTicker: String!
}

type KeyValueType {
  key: String!
  value: String!
}

type Marketplace {
  acceptedCollectionIdentifiers: [String!]
  acceptedPaymentTokens: [Token!]
  address: String!
  iconUrl: String!
  isPaused: Boolean
  key: ID!
  marketplaceCutPercentage: String
  name: String!
  type: MarketplaceTypeEnum!
  url: String!
}

type MarketplaceEdge {
  cursor: String
  node: Marketplace
}

input MarketplaceEventsIndexingArgs {
  afterTimestamp: Float
  beforeTimestamp: Float
  marketplaceAddress: String!
  marketplaceLastIndexTimestamp: Float
  stopIfDuplicates: Boolean
}

input MarketplaceFilters {
  marketplaceAddress: String
  marketplaceKey: String
}

type MarketplacePageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

enum MarketplaceTypeEnum {
  External
  Internal
}

type MarketplacesResponse {
  edges: [MarketplaceEdge!]
  pageData: PageData
  pageInfo: MarketplacePageInfo
}

type Media {
  fileSize: String
  fileType: String
  originalUrl: String
  thumbnailUrl: String
  url: String
}

enum MediaTypeEnum {
  aac
  flac
  gif
  jpeg
  jpg
  m4a
  mov
  mov2
  mp3
  mp4
  png
  svg
  svgXml
  wav
  webm
  webp
}

type Metadata {
  attributes: [AttributeType!]
  description: String
}

type MintPrice {
  amount: String!
  token: ID!
}

type Mutation {
  addLike(input: AddLikeArgs!): Boolean!
  addReport(input: ReportNftInput!): Boolean!
  addSftQuantity(input: HandleQuantityArgs!): TransactionNode!
  bid(input: BidActionArgs!): TransactionNode!
  burnQuantity(input: HandleQuantityArgs!): TransactionNode!
  buyRandomNft(input: BuyRandomNftActionArgs!): TransactionNode!
  buySft(input: BuySftActionArgs!): TransactionNode!
  buyTickets(input: BuyTicketsArgs!): TransactionNode!
  claimTicket(input: ClaimTicketsArgs!): TransactionNode!
  clearNftScamInfo(identifier: String!): Boolean!
  createAuction(input: CreateAuctionArgs!): TransactionNode!
  createNft(file: Upload!, input: CreateNftArgs!): TransactionNode!
  createOffer(input: CreateOfferArgs!): TransactionNode!
  endAuction(auctionId: Int!): TransactionNode!
  flagCollection(input: FlagCollectionInput!): Boolean!
  flagNft(input: FlagNftInput!): Boolean!
  issueCampaign(input: IssueCampaignArgs!): TransactionNode!
  issueNftCollection(input: IssueCollectionArgs!): TransactionNode!
  issueSftCollection(input: IssueCollectionArgs!): TransactionNode!
  reindexMarketplaceEvents(input: MarketplaceEventsIndexingArgs!): Boolean!
  removeLike(input: RemoveLikeArgs!): Boolean!
  setNftScamInfo(identifier: String!, info: String!, type: ScamInfoTypeEnum!): Boolean!
  setRoles(input: SetNftRolesArgs!): TransactionNode!
  stopNftCreate(input: StopNftCreateArgs!): TransactionNode!
  transferNft(input: TransferNftArgs!): TransactionNode!
  transferNftCreateRole(input: TransferNftCreateRoleArgs!): TransactionNode!
  updateCollectionRarities(collectionTicker: String!): Boolean!
  updateCollectionTraits(collectionTicker: String!): Boolean!
  updateNftTraits(identifier: String!): UpdateNftTraitsResponse!
  validateCollectionRarities(collectionTicker: String!): Boolean!
  validateOrUpdateNftScamInfo(identifier: String!): Boolean!
  verifyContent(file: Upload!): Boolean!
  withdraw(auctionId: Int!): TransactionNode!
}

input MyClaimableAuctionsFilters {
  marketplaceKey: String!
}

input NftTrait {
  name: String!
  value: String!
}

enum NftTypeEnum {
  NonFungibleESDT
  SemiFungibleESDT
}

type Notification {
  auctionId: Int!
  creationDate: Int
  id: ID!
  identifier: String!
  marketplaceKey: String!
  name: String!
  type: NotificationTypeEnum!
}

type NotificationEdge {
  cursor: String
  node: Notification
}

type NotificationPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

enum NotificationTypeEnum {
  Bought
  Ended
  Outbidded
  Sold
  Won
}

input NotificationsFilters {
  marketplaceKey: String!
}

type NotificationsResponse {
  edges: [NotificationEdge!]
  pageData: PageData
  pageInfo: NotificationPageInfo
}

enum Operation {
  BETWEEN
  EQ
  GE
  IN
  LE
  LIKE
}

enum Operator {
  AND
  OR
}

type Order {
  auction: Auction
  auctionId: Int!
  boughtTokensNo: String
  creationDate: Int
  endDate: Int
  from: Account
  id: ID!
  marketplaceKey: String!
  ownerAddress: String!
  price: Price!
  status: OrderStatusEnum!
}

type OrderEdge {
  cursor: String
  node: Order
}

type OrderPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

enum OrderStatusEnum {
  Active
  Bought
  Inactive
}

type OrdersResponse {
  edges: [OrderEdge!]
  pageData: PageData
  pageInfo: OrderPageInfo
}

type Owner {
  account: Account
  address: String
  balance: String
  identifier: ID
}

type OwnerEdge {
  cursor: String
  node: Owner
}

type OwnerPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type OwnerResponse {
  edges: [OwnerEdge!]
  pageData: PageData
  pageInfo: OwnerPageInfo
}

input OwnersFilters {
  identifier: String!
}

type PageData {
  count: Int!
  limit: Int!
  offset: Int!
}

type Price {
  amount: String!
  nonce: Int!
  timestamp: Int!
  token: ID!
  tokenData: Token!
  usdAmount: String
}

type PriceRange {
  maxBid: Price!
  minBid: Price!
}

type PrimarySale {
  collectionIdentifier: ID
  frozen: Boolean
  maxUnitsPerWallet: Int!
  paymentToken: String!
  price: String
  saleTime: PrimarySaleTime!
  status: PrimarySaleStatusEnum!
}

input PrimarySaleFilter {
  collectionName: String!
}

enum PrimarySaleStatusEnum {
  BetweenPeriod
  ClaimPeriod
  EndedPeriod
  NonePeriod
  NotStarted
  SalePeriod
}

type PrimarySaleTime {
  endClaim: Int
  endSale: Int!
  startClaim: Int
  startSale: Int!
}

enum Privacy {
  private
  public
}

type Query {
  accountStats(filters: AccountStatsFilter!): AccountStats!
  artists(filters: ArtistFilters!, pagination: ConnectionArgs): ArtistResponse!
  assetHistory(filters: AssetHistoryFilter!, pagination: HistoryPagination): AssetHistoryLogResponse!
  assets(filters: AssetsFilter, pagination: ConnectionArgs, sorting: AssetsSortingEnum): AssetsResponse!
  auctions(
    customFilters: [AuctionCustomFilter]

    """
    The values that can be used for this filters fields are the entity properties
    """
    filters: FiltersExpression
    grouping: Grouping
    pagination: ConnectionArgs

    """
    The values that can be used for this sorting fields are the entity properties
    """
    sorting: [Sorting!]
  ): AuctionResponse!
  auctionsSortByBids(filters: FiltersExpression, grouping: Grouping, pagination: ConnectionArgs): AuctionResponse!
  campaigns(filters: CampaignsFilter, pagination: ConnectionArgs): CampaignsResponse!
  collectionStats(filters: CollectionStatsFilter!): CollectionStats!
  collections(filters: CollectionsFilter, pagination: ConnectionArgs, sorting: CollectionsSortingEnum): CollectionResponse!
  currentPaymentTokens(filters: CurrentPaymentTokensFilters): [Token!]!
  exploreCollectionsStats: ExploreCollectionsStats!
  exploreNftsStats: ExploreNftsStats!
  exploreStats: ExploreStats!
  featuredCollections(filters: FeaturedCollectionsFilter, pagination: ConnectionArgs): CollectionResponse!
  featuredNfts(pagination: ConnectionArgs): AssetsResponse!
  hasClaimedTickets(collectionIdentifier: String!): Boolean!
  isWhitelisted: WhitelistedInfo!
  marketplaces(filters: MarketplaceFilters, pagination: ConnectionArgs): MarketplacesResponse!
  myClaimableAuctions(filters: MyClaimableAuctionsFilters, pagination: ConnectionArgs): AuctionResponse!
  myTickets(collectionIdentifier: String!): [TicketInfo!]!
  notifications(filters: NotificationsFilters, pagination: ConnectionArgs): NotificationsResponse!
  orders(filters: FiltersExpression, pagination: ConnectionArgs, sorting: [Sorting!]): OrdersResponse!
  owners(filters: OwnersFilters!, pagination: ConnectionArgs): OwnerResponse!
  priceRange(filters: TokenFilter): PriceRange!
  primarySale(filters: PrimarySaleFilter!): PrimarySale!
  search(filters: SearchFilter!): SearchResponse!
  tags(filters: TagsFilter!, pagination: ConnectionArgs): TagsResponse!
  trendingAssets: [Asset!]!
}

type Rarity {
  customRank: Int
  jaccardDistancesRank: Float
  jaccardDistancesScore: Float
  openRarityRank: Float
  openRarityScore: Float
  rank: Int
  score: Float
  statisticalRank: Float
  statisticalScore: Float
  traitRank: Float
  traitScore: Float
}

input RemoveLikeArgs {
  identifier: String!
}

input ReportNftInput {
  identifier: String!
}

type ScamInfo {
  info: String
  type: ScamInfoTypeEnum
}

enum ScamInfoTypeEnum {
  potentialScam
  scam
}

input SearchFilter {
  searchTerm: String!
}

type SearchItemResponse {
  identifier: String!
  name: String
}

type SearchNftCollectionResponse {
  identifier: String!
  name: String
  verified: Boolean!
}

type SearchResponse {
  accounts: [SearchItemResponse!]
  collections: [SearchNftCollectionResponse!]
  nfts: [SearchNftCollectionResponse!]
  searchTerm: ID
  tags: [SearchItemResponse!]
}

input SetNftRolesArgs {
  addressToTransfer: String!
  collection: String!
  roles: [String!]!
}

type SocialLink {
  type: ID
  url: String
}

enum Sort {
  ASC
  DESC
}

input Sorting {
  direction: Sort!
  field: String!
}

input StopNftCreateArgs {
  collection: String!
  ownerAddress: String!
}

type Tag {
  count: Int
  tag: ID!
}

type TagEdge {
  cursor: String
  node: Tag
}

type TagPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

enum TagTypeEnum {
  Auction
  Nft
}

input TagsFilter {
  searchTerm: String
  tagType: TagTypeEnum = Nft
}

type TagsResponse {
  edges: [TagEdge!]
  pageData: PageData
  pageInfo: TagPageInfo
}

type TicketInfo {
  buyer: String!
  ticketNumber: Int!
  winningNonce: String!
}

type Tier {
  availableNfts: Int!
  campaignId: ID!
  description: String
  mintPrice: MintPrice!
  status: TierStatusEnum!
  tierName: String!
  totalNfts: Int!
}

input TierArgs {
  mintPriceAmount: String!
  tierName: String!
  totalNfts: Int!
}

enum TierStatusEnum {
  Running
  Sold
}

type Token {
  activeAuctions: Int
  decimals: Float!
  identifier: String!
  name: String!
  priceUsd: String
  symbol: String!
}

input TokenFilter {
  token: String = "EGLD"
}

type TransactionNode {
  chainID: String!
  data: String!
  gasLimit: Float!
  gasPrice: Float!
  nonce: Int!
  options: Float
  receiver: String!
  sender: String!
  value: String!
  version: Float!
}

input TransferNftArgs {
  destinationAddress: String!
  identifier: String!
  quantity: String = "1"
}

input TransferNftCreateRoleArgs {
  addressToTransferList: [String!]!
  collection: String!
  ownerAddress: String!
}

enum UpdateNftTraitsResponse {
  CollectionTraitsUpdated
  NftTraitsUpdated
  NftTraitsValid
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type WhitelistedInfo {
  isWhitelisted: Boolean!
  message: String
}
