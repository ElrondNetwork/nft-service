# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Account {
  address: ID!
  assets: [Asset!]!
  auctions: [Auction!]!
  followers: [Account!]!
  following: [Account!]!
  herotag: String
  id: Float!
  orders: [Order!]!
  profileImgUrl: String
}

type Asset {
  attributes: [Attribute!]!
  creationDate: DateTime!
  creator: Account!
  currentOwner: Onwer!
  hash: String!
  lastSale: DateTime!
  lastSalePrice: Price!
  name: String!
  previousOwners: [Onwer!]!
  royalties: String!
  tags: [String!]!
  tokenId: ID!
  tokenNonce: String!
  uris: [String!]!
}

type Attribute {
  attributeId: String!
  description: String!
  key: String!
  value: String!
}

type Auction {
  asset: Asset!
  auctionId: ID!
  endDate: DateTime!
  maxBid: Price!
  minBid: Price!
  orders: [Order!]!
  owner: Account!
  startDate: DateTime!
  topBid: Price!
  topBidder: Account!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  createAccount(address: String!, herotag: String!, profileImgUrl: String!): Account!
  issueNft(owner_address: String!, token_name: String!, token_ticker: String!): TransactionNode!
  setRoles(address_transfer: String!, role: String!, token_identifier: String!): TransactionNode!
  updateAccount(profileImgUrl: String!): Account!
}

type Onwer {
  account: ID!
  endDate: DateTime!
  startDate: DateTime!
}

type Order {
  auction: Auction!
  creationDate: DateTime!
  from: Account!
  orderId: ID!
  price: Price!
  status: String!
}

type Price {
  amount: String!
  nonce: String!
  tokenIdentifier: ID!
}

type Query {
  assets(id: String!): [Asset!]!
  auctions(auctionId: String!): [Auction!]!
  fetchTokenIdentifiersForUser(address: String!): [TokenType!]!
  findAllAsset: [Asset!]!
  findAllAuction: [Auction!]!
  findAllOrder: [Order!]!
  findAllTokenType: [TokenType!]!
  getAccount(address: String, id: Float): Account!
  getTokensForAddress(owner_address: String!): [TokenType!]!
  order(orderId: String!): [Order!]!
}

type TokenType {
  address: String!
  creationDate: DateTime!
  id: Float!
  tokenIdentifier: String
  tokenName: String!
  tokenTicker: String!
}

type TransactionNode {
  chainID: String!
  data: String!
  gasLimit: Float!
  gasPrice: Float!
  nonce: Float!
  options: String!
  receiver: String!
  sender: String!
  status: String!
  value: String!
  version: Float!
}
