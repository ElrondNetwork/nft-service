# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Account {
  address: ID!
  assets: [Asset!]!
  auctions: [Auction!]!
  followers: [Account!]!
  following: [Account!]!
  herotag: String
  id: Float!
  orders: [Order!]!
  profileImgUrl: String
}

input AddTagsArgs {
  tags: [String!]!
  tokenIdentifier: String!
}

type Asset {
  attributes: [Attribute!]!
  creationDate: DateTime!
  creator: Account!
  creatorAddress: String!
  currentOwner: Onwer!
  hash: String!
  lastSale: DateTime!
  lastSalePrice: Price
  name: String!
  ownerAddress: String!
  previousOwners: [Onwer!]!
  royalties: String!
  tags: [String!]!
  tokenId: ID!
  tokenNonce: Float!
  uris: [String!]!
}

type Attribute {
  attributeId: String!
  description: String!
  key: String!
  value: String!
}

type Auction {
  asset: Asset!
  auctionId: ID!
  endDate: DateTime!
  maxBid: Price!
  minBid: Price!
  orders: [Order!]!
  owner: Account!
  startDate: DateTime!
  topBid: Price!
  topBidder: Account!
}

input CreateAccountArgs {
  address: String!
  herotag: String!
  profileImgUrl: String!
}

input CreateNftArgs {
  attributes: String!
  file: Upload!
  hash: String!
  name: String!
  ownerAddress: String!
  royalties: String!
  tokenIdentifier: String!
  tokenNonce: String!
  uri: String!
}

input CreateOrderArgs {
  auctionId: Float!
  ownerAddress: String!
  priceAmount: String!
  priceNonce: String!
  priceTokenIdentifier: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input IssueTokenArgs {
  tokenName: String!
  tokenTicker: String!
}

type Mutation {
  addTags(input: AddTagsArgs!): [Tag!]!
  createAccount(input: CreateAccountArgs!): Account!
  createNft(input: CreateNftArgs!): TransactionNode!
  createOrder(input: CreateOrderArgs!): Order!
  issueNft(input: IssueTokenArgs!): TransactionNode!
  setRoles(input: SetNftRolesArgs!): TransactionNode!
  transferNft(input: TransferNftArgs!): TransactionNode!
  updateAccount(profileImgUrl: String!): Account!
  uploadFile(file: Upload!): Boolean!
  uploadImage(file: Upload!): String!
}

type Onwer {
  account: Account
  endDate: DateTime!
  startDate: DateTime!
}

type Order {
  auction: Auction!
  creationDate: DateTime!
  from: Account!
  orderId: ID!
  price: Price!
  status: String!
}

type Price {
  amount: String!
  nonce: String!
  tokenIdentifier: ID!
}

type Query {
  auctions(auctionId: String!): [Auction!]!
  findAllAsset: [Asset!]!
  findAllAuction: [Auction!]!
  findAllOrder: [Order!]!
  findAllTokenType: [TokenType!]!
  getAccount(address: String, id: Float): Account!
  getAssetsForUser(address: String!): [Asset!]!
  order(orderId: String!): [Order!]!
}

input SetNftRolesArgs {
  addressToTransfer: String!
  role: String!
  tokenIdentifier: String!
}

type Tag {
  id: ID!
  tag: String!
  tokenId: String!
}

type TokenType {
  address: String!
  creationDate: DateTime!
  id: Float!
  tokenIdentifier: String
  tokenName: String!
  tokenTicker: String!
}

type TransactionNode {
  chainID: String!
  data: String!
  gasLimit: Float!
  gasPrice: Float!
  nonce: Float!
  options: String!
  receiver: String!
  sender: String!
  status: String!
  value: String!
  version: Float!
}

input TransferNftArgs {
  destinationAddress: String!
  ownerAddress: String!
  quantity: String!
  tokenIdentifier: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload
