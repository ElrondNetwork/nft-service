# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Account {
  address: ID!
  assets: [Asset!]!
  auctions: [Auction!]!
  followers: [Account!]!
  following: [Account!]!
  herotag: String
  id: Int!
  orders: [Order!]!
  profileImgUrl: String
}

input AddLikeArgs {
  address: String!
  nonce: Int!
  token: String!
}

type Asset {
  attributes: String!
  auction: Auction
  creationDate: DateTime!
  creator: Account!
  creatorAddress: String!
  currentOwner: Onwer!
  hash: String
  identifier: String!
  isLiked(byAddress: String!): Boolean!
  lastSale: DateTime!
  lastSalePrice: Price
  likesCount: Int!
  name: String!
  nonce: Int!
  ownerAddress: String!
  previousOwners: [Onwer!]!
  royalties: String!
  tags: [String!]!
  token: ID!
  uris: [String!]!
}

input AttributeInput {
  description: String!
  tags: [String!]!
}

type Auction {
  asset: Asset!
  endDate: String!
  id: ID!
  maxBid: Price!
  minBid: Price!
  nonce: Int!
  orders: [Order!]!
  owner: Account!
  ownerAddress: String!
  startDate: String!
  status: AuctionStatusEnum!
  token: String!
  topBid: Price
  topBidder: Account
}

enum AuctionStatusEnum {
  Closed
  Ended
  None
  Running
  SftWaitingForBuyOrOwnerClaim
}

input BidActionArgs {
  auctionId: Int!
  nonce: String!
  price: String!
  token: String!
}

input CreateAccountArgs {
  address: String!
  herotag: String!
  profileImgUrl: String!
}

input CreateAuctionArgs {
  deadline: String!
  maxBid: String!
  maxOneSftPerPayment: Boolean!
  minBid: String!
  nonce: String!
  ownerAddress: String!
  paymentToken: String!
  paymentTokenNonce: Int!
  quantity: Int!
  startDate: String!
  token: String!
}

input CreateNftArgs {
  attributes: AttributeInput!
  name: String!
  ownerAddress: String!
  quantity: Int!
  royalties: String!
  token: String!
}

input CreateOrderArgs {
  auctionId: Int!
  ownerAddress: String!
  priceAmount: String!
  priceNonce: Int!
  priceToken: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input HandleQuantityArgs {
  addOrBurnRoleAddress: String!
  nonce: Int!
  quantity: Int!
  token: String!
}

input IssueTokenArgs {
  canFreeze: Boolean = false
  canPause: Boolean = false
  canTransferNFTCreateRole: Boolean = false
  canWipe: Boolean = false
  tokenName: String!
  tokenTicker: String!
}

type Mutation {
  addLike(input: AddLikeArgs!): Boolean!
  addSftQuantity(input: HandleQuantityArgs!): TransactionNode!
  bid(input: BidActionArgs!): TransactionNode!
  burnQuantity(input: HandleQuantityArgs!): TransactionNode!
  createAccount(input: CreateAccountArgs!): Account!
  createAuction(input: CreateAuctionArgs!): TransactionNode!
  createNft(file: Upload!, input: CreateNftArgs!): TransactionNode!
  createOrder(input: CreateOrderArgs!): Order!
  endAuction(auctionId: Int!): TransactionNode!
  issueNft(input: IssueTokenArgs!): TransactionNode!
  issueSemiFungible(input: IssueTokenArgs!): TransactionNode!
  removeLike(input: RemoveLikeArgs!): Boolean!
  saveAuction(auctionId: Int!): Auction!
  setRoles(input: SetNftRolesArgs!): TransactionNode!
  stopNFTCreate(input: StopNftCreateArgs!): TransactionNode!
  transferNFTCreateRole(input: TransferNftCreateRoleArgs!): TransactionNode!
  transferNft(input: TransferNftArgs!): TransactionNode!
  updateAccount(profileImgUrl: String!): Account!
  updateAuctionStatus(input: UpdateAuctionArgs!): Auction!
  withdraw(auctionId: Int!): TransactionNode!
}

type Onwer {
  account: Account
  endDate: DateTime!
  startDate: DateTime!
}

type Order {
  auction: Auction!
  creationDate: DateTime!
  endDate: DateTime!
  from: Account!
  id: ID!
  ownerAddress: String!
  price: Price!
  status: OrderStatusEnum!
}

enum OrderStatusEnum {
  active
  inactive
}

type Price {
  amount: String!
  nonce: Int!
  token: ID!
}

type Query {
  getAccount(address: String, id: Float): Account!
  getAssets: [Asset!]!
  getAssetsForUser(address: String!): [Asset!]!
  getAuctions(ownerAddress: String!): [Auction!]!
  getOrdersForAsset(token: String!): [Order!]!
  getRegisteredNfts(ownerAddress: String!): [String!]!
}

input RemoveLikeArgs {
  address: String!
  nonce: Int!
  token: String!
}

input SetNftRolesArgs {
  addressToTransfer: String!
  roles: [String!]!
  token: String!
}

input StopNftCreateArgs {
  ownerAddress: String!
  token: String!
}

type TransactionNode {
  chainID: String!
  data: String!
  gasLimit: Float!
  gasPrice: Float!
  nonce: Int!
  options: String!
  receiver: String!
  sender: String!
  status: String!
  value: String!
  version: Float!
}

input TransferNftArgs {
  destinationAddress: String!
  nonce: Int!
  ownerAddress: String!
  quantity: Int!
  token: String!
}

input TransferNftCreateRoleArgs {
  addressToTransferList: [String!]!
  ownerAddress: String!
  token: String!
}

input UpdateAuctionArgs {
  id: Int!
  status: AuctionStatusEnum!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload
