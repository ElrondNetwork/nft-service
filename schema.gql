# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Account {
  address: ID!
  assets: [Asset!]!
  auctions: [Auction!]!
  followers: [Account!]!
  following: [Account!]!
  herotag: String
  id: Float!
  orders: [Order!]!
  profileImgUrl: String
}

input AddSftQuantityArgs {
  nonce: Int!
  ownerAddress: String!
  quantity: Int!
  tokenIdentifier: String!
}

type Asset {
  attributes: String!
  auction: Auction
  creationDate: DateTime!
  creator: Account!
  creatorAddress: String!
  currentOwner: Onwer!
  hash: String!
  lastSale: DateTime!
  lastSalePrice: Price
  name: String!
  ownerAddress: String!
  previousOwners: [Onwer!]!
  royalties: String!
  tags: [String!]!
  tokenIdentifier: ID!
  tokenNonce: Float!
  uris: [String!]!
}

input AttributeInput {
  description: String!
  tags: [String!]!
}

type Auction {
  asset: Asset!
  endDate: String!
  id: ID!
  maxBid: Price!
  minBid: Price!
  orders: [Order!]!
  owner: Account!
  ownerAddress: String!
  startDate: String!
  status: AuctionStatusEnum!
  topBid: Price
  topBidder: Account
}

enum AuctionStatusEnum {
  active
  closed
  ended
}

input BidActionArgs {
  price: String!
  tokenIdentifier: String!
  tokenNonce: String!
}

input CreateAccountArgs {
  address: String!
  herotag: String!
  profileImgUrl: String!
}

input CreateAuctionArgs {
  deadline: String!
  maxBid: String!
  minBid: String!
  nonce: String!
  ownerAddress: String!
  paymentTokenIdentifier: String!
  paymentTokenNonce: String!
  startDate: String!
  tokenIdentifier: String!
}

input CreateNftArgs {
  attributes: AttributeInput!
  name: String!
  ownerAddress: String!
  quantity: String!
  royalties: String!
  tokenIdentifier: String!
}

input CreateOrderArgs {
  auctionId: Float!
  ownerAddress: String!
  priceAmount: String!
  priceNonce: String!
  priceTokenIdentifier: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input IssueTokenArgs {
  canFreeze: Boolean = false
  canPause: Boolean = false
  canTransferNFTCreateRole: Boolean = false
  canWipe: Boolean = false
  tokenName: String!
  tokenTicker: String!
}

type Mutation {
  addSftQuantity(input: AddSftQuantityArgs!): TransactionNode!
  bid(input: BidActionArgs!): TransactionNode!
  createAccount(input: CreateAccountArgs!): Account!
  createAuction(input: CreateAuctionArgs!): TransactionNode!
  createNft(file: Upload!, input: CreateNftArgs!): TransactionNode!
  createOrder(input: CreateOrderArgs!): Order!
  endAuction(input: TokenActionArgs!): TransactionNode!
  issueNft(input: IssueTokenArgs!): TransactionNode!
  issueSemiFungible(input: IssueTokenArgs!): TransactionNode!
  saveAuction(nonce: Int!, tokenIdentifier: String!): Auction!
  setRoles(input: SetNftRolesArgs!): TransactionNode!
  transferNft(input: TransferNftArgs!): TransactionNode!
  updateAccount(profileImgUrl: String!): Account!
  updateAuctionStatus(input: UpdateAuctionArgs!): Auction!
  withdraw(input: TokenActionArgs!): TransactionNode!
}

type Onwer {
  account: Account
  endDate: DateTime!
  startDate: DateTime!
}

type Order {
  auction: Auction!
  creationDate: DateTime!
  endDate: DateTime!
  from: Account!
  id: ID!
  ownerAddress: String!
  price: Price!
  status: OrderStatusEnum!
}

enum OrderStatusEnum {
  active
  inactive
}

type Price {
  amount: String!
  nonce: String!
  tokenIdentifier: ID!
}

type Query {
  getAccount(address: String, id: Float): Account!
  getAssetsForUser(address: String!): [Asset!]!
  getAuctions(ownerAddress: String!): [Auction!]!
  getOrdersForAsset(tokenIdentifier: String!): [Order!]!
  getRegisteredNfts(ownerAddress: String!): [String!]!
}

input SetNftRolesArgs {
  addressToTransfer: String!
  roles: [String!]!
  tokenIdentifier: String!
}

input TokenActionArgs {
  tokenIdentifier: String!
  tokenNonce: String!
}

type TransactionNode {
  chainID: String!
  data: String!
  gasLimit: Float!
  gasPrice: Float!
  nonce: Float!
  options: String!
  receiver: String!
  sender: String!
  status: String!
  value: String!
  version: Float!
}

input TransferNftArgs {
  destinationAddress: String!
  ownerAddress: String!
  quantity: String!
  tokenIdentifier: String!
  tokenNonce: String!
}

input UpdateAuctionArgs {
  id: Int!
  status: AuctionStatusEnum!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload
